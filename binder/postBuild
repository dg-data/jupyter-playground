#!/usr/bin/env python3
""" perform a development install of @jupyterlab/plugin-playground

    This script should also run locally on Linux/MacOS/Windows:

        python3 binder/postBuild
"""
import shutil
import subprocess
import sys
from pathlib import Path

ROOT = Path.cwd()

def _(*args, **kwargs):
    """ Run a command, echoing the args
        fails hard if something goes wrong
    """
    print("\n\t", " ".join(args), "\n")
    return_code = subprocess.call(args, **kwargs)
    if return_code != 0:
        print("\nERROR", return_code, " ".join(args))
        sys.exit(return_code)

# verify the environment is self-consistent before even starting
_(sys.executable, "-m", "pip", "check")

# install the labextension
_(sys.executable, "-m", "pip", "install", "-e", ".")
_(sys.executable, "-m", "jupyter", "labextension", "develop", "--overwrite", ".")

# verify the environment the extension didn't break anything
_(sys.executable, "-m", "pip", "check")

# list the extensions
_("jupyter", "server", "extension", "list")

# initially list installed extensions to determine if there are any surprises
_("jupyter", "labextension", "list")

# install javascript language server for autocompletion and error highlighting
# (typescript-language-server depends on tsutils which requires us to choose typescript version)
_("jlpm", "add", "typescript-language-server", "typescript@4.1")

# add overrides for LSP settings
SETTINGS = Path(sys.prefix) / "share/jupyter/lab/settings"
SETTINGS.mkdir(parents=True, exist_ok=True)
shutil.copy2("binder/overrides.json", SETTINGS / "overrides.json")

# download examples can be done with nbgitpuller
# _("git", "clone", "https://github.com/jupyterlab/extension-examples.git")

print("JupyterLab with @jupyterlab/plugin-playground is ready to run")
